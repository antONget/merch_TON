from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, InputMediaPhoto
from aiogram.filters import CommandStart, or_f
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup, default_state

from keyboards.keyboard_user import keyboards_main, keyboards_get_contact, keyboard_confirm_phone, \
    keyboard_confirm_order, keyboard_confirm_pay, keyboards_card_merch_new, keyboard_create_merch, keyboard_pay_custom, \
    keyboard_size_hoodie, keyboard_size_hoodie1
from config_data.config import Config, load_config
from database.requests import get_merch, get_all_order, add_order, add_user, update_name_user,\
    update_phone_user, update_address_delivery_user, update_address_delivery_order, get_user, get_order,\
    get_merch_category, update_user_data, update_size_order
from filter.filter import validate_russian_phone_number
from cryptoh.CryptoHelper import XRocketPayStatus, XRocketPayCurrency, x_roket_pay


import logging
import asyncio


router = Router()
user_dict = {}
config: Config = load_config()


class Merch(StatesGroup):
    username = State()
    phone = State()
    address_delivery = State()
    count_merch = State()
    id_merch = State()
    custom = State()


@router.message(CommandStart())
async def process_start_command_user(message: Message, state: FSMContext) -> None:
    """
    –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (–≤–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã /start)
    """
    logging.info(f"process_start_command_user {message.chat.id}")
    await state.set_state(default_state)

    data = {"id_tg": message.chat.id, "username": message.from_user.username, "name": message.from_user.first_name,
            "phone": "None", "address_delivery": "None"}
    await add_user(data=data)
    await message.answer(text=f'–ü—Ä–∏–≤–µ—Ç! –ú—ã - –∫–æ–º–∞–Ω–¥–∞ Oneü´∂üèª\n\n'
                              f'–£ –Ω–∞—Å –æ—Ç–ª–∏—á–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç—Å—è —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å—Ç–∏–ª—å–Ω—ã–π –∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –º–µ—Ä—á, –∫–æ—Ç–æ—Ä—ã–π –º—ã –±—ã—Å—Ç—Ä–æ'
                              f' –∏ –±–µ—Å–ø–ª–∞—Ç–Ω–æ –¥–æ—Å—Ç–∞–≤–∏–º –≤ –ª—é–±–æ–π –≥–æ—Ä–æ–¥ –°–ù–ì –æ—Ç 3 –¥–æ 15 –¥–Ω–µ–πüíô',
                         reply_markup=keyboards_main())


@router.message(F.text == 'support üíô')
async def press_button_support(message: Message, state: FSMContext) -> None:
    """
    –ó–∞–ø—Ä–æ—Å –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    """
    logging.info("press_button_support")
    await state.set_state(default_state)
    await message.answer(text=f'–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã —Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É {config.tg_bot.support}')


@router.message(F.text == 'community üë®‚Äçüé§')
async def press_button_support(message: Message, state: FSMContext) -> None:
    """
    —Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª
    """
    logging.info("press_button_support")
    await state.set_state(default_state)
    await message.answer(text=f'–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –≤ –Ω–∞—à—É –≥—Ä—É–ø–ø—É. –¢–∞–º –≤—ã –Ω–∞–π–¥–µ—Ç–µ –º–Ω–æ–≥–æ –ø–æ–ª–µ–∑–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏'
                              f' {config.tg_bot.community}')


@router.message(F.text == 'hoodie üëò')
async def select_category_hoodie(message: Message, state: FSMContext):
    logging.info(f'select_category: {message.chat.id}')
    await state.update_data(category='hoodie')
    await show_merch_slider(message=message, state=state)


@router.message(F.text == 'cup ‚òïÔ∏è')
async def select_category_cup(message: Message, state: FSMContext):
    logging.info(f'select_category_cup: {message.chat.id}')
    await state.update_data(category='cup')
    await show_merch_slider(message=message, state=state)


@router.message(F.text == 'flag üö©')
async def select_category_flag(message: Message, state: FSMContext):
    logging.info(f'select_category_flag: {message.chat.id}')
    await state.update_data(category='flag')
    await show_merch_slider(message=message, state=state)


@router.message(F.text == 'create your merch üé®')
async def select_category_hoodie(message: Message):
    logging.info(f'select_category: {message.chat.id}')
    await message.answer(text='–ù–∞ —á–µ–º –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å merch',
                         reply_markup=keyboard_create_merch())


@router.callback_query(F.data.startswith('custom_'))
async def process_custom(callback: CallbackQuery, state: FSMContext, bot: Bot):
    logging.info(f'process_custom: {callback.message.chat.id}')
    await bot.delete_message(chat_id=callback.message.chat.id, message_id=callback.message.message_id)
    answer = callback.data.split('_')[1]
    if answer == 'hoodie':
        await state.update_data(id_merch=4)
    elif answer == 'cup':
        await state.update_data(id_merch=5)
    elif answer == 'flag':
        await state.update_data(id_merch=17)
    await callback.message.answer(text='–û—Ç–ª–∏—á–Ω–æ —Ç–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –∏–ª–∏ —Ñ–∞–π–ª')
    await state.set_state(Merch.custom)


@router.message(or_f(F.document, F.photo), StateFilter(Merch.custom))
async def get_file_custom(message: Message, bot: Bot, state: FSMContext):
    logging.info(f'get_file_custom: {message.chat.id}')
    if message.photo:
        for admin_id in config.tg_bot.admin_ids.split(','):
            try:
                await bot.send_photo(chat_id=admin_id,
                                     photo=message.photo[-1].file_id,
                                     caption=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} –ø—Ä–∏—Å–ª–∞–ª —Ñ–æ—Ç–æ –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –º–µ—Ä—á–∞')
                await message.answer(text='–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–µ–Ω–µ–¥–∂–µ—Ä—É, –æ—Å—Ç–∞–ª–æ—Å—å –æ–ø–ª–∞—Ç–∏—Ç—å',
                                     reply_markup=keyboard_pay_custom())
            except:
                await message.answer(text='–§–æ—Ç–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É')
    if message.document:
        for admin_id in config.tg_bot.admin_ids.split(','):
            try:
                await bot.send_document(chat_id=admin_id,
                                        document=message.document.file_id,
                                        caption=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} –ø—Ä–∏—Å–ª–∞–ª —Ñ–∞–π–ª –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –º–µ—Ä—á–∞')
                await message.answer(text='–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–µ–Ω–µ–¥–∂–µ—Ä—É, –æ—Å—Ç–∞–ª–æ—Å—å –æ–ø–ª–∞—Ç–∏—Ç—å',
                                     reply_markup=keyboard_pay_custom())
            except:
                await message.answer(text='–§–æ—Ç–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É')


@router.callback_query(F.data.startswith('create_pay'))
@router.callback_query(F.data.startswith('size1_'))
async def process_create_pay(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–ª–∞—Ç—ã —Ç–æ–≤–∞—Ä–∞
    :param callback:
    :param state:
    :param bot:
    :return:
    """
    logging.info(f'process_bay_merch: {callback.message.chat.id}')
    await bot.delete_message(chat_id=callback.message.chat.id, message_id=callback.message.message_id)
    user_dict[callback.message.chat.id] = await state.get_data()
    id_merch = user_dict[callback.message.chat.id]['id_merch']
    if not callback.data.startswith('size1'):
        await state.set_state(default_state)
        info_merch = await get_merch(id_merch=id_merch)
        if info_merch.category == 'hoodie':
            await callback.message.answer(text=f'–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä hoodie',
                                          reply_markup=keyboard_size_hoodie1())
            return
    # !!! REPLACE TEST AMOUNT TO
    merch = await get_merch(id_merch=id_merch)
    amount = merch.amount / 10000
    invoice_id, link = await x_roket_pay.create_invoice(amount, currency=XRocketPayCurrency.ton,
                                                        description='Pay for our merch!')

    await update_user_data(**{
        'id_tg': callback.message.chat.id,
        'invoice_id': invoice_id,
        'status': XRocketPayStatus.active
    })

    await callback.message.answer(f'–û–ø–ª–∞—Ç–∏—Ç–µ —Ç–æ–≤–∞—Ä –ø–æ <a href="{link}">—Å—Å—ã–ª–∫–µ</a>',
                                  reply_markup=keyboard_confirm_pay(id_merch),
                                  parse_mode='html')


async def show_merch_slider(message: Message, state: FSMContext):
    """
    –í—ã–≤–æ–¥–∏–º –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ –±–ª–æ–∫–∞—Ö
    :param message:
    :param state:
    :return:
    """
    logging.info(f'show_merch_slider: {message.chat.id}')
    user_dict[message.chat.id] = await state.get_data()
    category = user_dict[message.chat.id]['category']
    models_merch = await get_merch_category(category_merch=category)
    list_merch = []
    for merch in models_merch:
        list_merch.append(merch)
    # –≤—ã–≤–æ–¥–∏–º –∫–∞—Ä—Ç–æ—á–∫–∏
    keyboard = keyboards_card_merch_new(list_merch=list_merch, block=0)
    await message.answer_photo(photo=list_merch[0].image,
                               reply_markup=keyboard)


# >>
@router.callback_query(F.data.startswith('forward_'))
async def process_forward(callback: CallbackQuery, state: FSMContext):
    """
    –ü–∞–≥–∏–Ω–∞—Ü–∏—è –≤–ø–µ—Ä–µ–¥
    :param callback: int(callback.data.split('_')[1]) –Ω–æ–º–µ—Ä –±–ª–æ–∫–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
    :param state:
    :return:
    """
    logging.info(f'process_forward_game: {callback.message.chat.id}')
    user_dict[callback.message.chat.id] = await state.get_data()
    category = user_dict[callback.message.chat.id]['category']
    models_merch = await get_merch_category(category_merch=category)
    list_merch = []
    for merch in models_merch:
        list_merch.append(merch)
    count_block = len(list_merch)
    num_block = int(callback.data.split('_')[1]) + 1
    if num_block == count_block:
        num_block = 0
    keyboard = keyboards_card_merch_new(list_merch=list_merch, block=num_block)
    try:
        await callback.message.edit_media(media=InputMediaPhoto(media=list_merch[num_block].image),
                                          reply_markup=keyboard)
    except:
        logging.info('ERROR')


# <<
@router.callback_query(F.data.startswith('back_'))
async def process_back(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –ü–∞–≥–∏–Ω–∞—Ü–∏—è –ø–æ —Å–ø–∏—Å–∫—É –∏–≥—Ä –∏–≥—Ä–æ–∫–∞
    :param callback: int(callback.data.split('_')[1]) –Ω–æ–º–µ—Ä –±–ª–æ–∫–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ –∏–≥—Ä
    :param state:
    :return:
    """
    logging.info(f'process_back: {callback.message.chat.id}')
    user_dict[callback.message.chat.id] = await state.get_data()
    category = user_dict[callback.message.chat.id]['category']
    models_merch = await get_merch_category(category_merch=category)
    list_merch = []
    for merch in models_merch:
        list_merch.append(merch)
    count_block = len(list_merch)
    num_block = int(callback.data.split('_')[1]) - 1
    if num_block < 0:
        num_block = count_block - 1
    keyboard = keyboards_card_merch_new(list_merch=list_merch, block=num_block)
    try:
        await callback.message.edit_media(media=InputMediaPhoto(media=list_merch[num_block].image),
                                          reply_markup=keyboard)
    except:
        logging.info('ERROR')


@router.callback_query(F.data.startswith('bay_'))
@router.callback_query(F.data.startswith('size_'))
async def process_bay_merch(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–ª–∞—Ç—ã —Ç–æ–≤–∞—Ä–∞
    :param callback:
    :param state:
    :return:
    """
    logging.info(f'process_bay_merch: {callback.message.chat.id}')
    await bot.delete_message(chat_id=callback.message.chat.id, message_id=callback.message.message_id)
    if not callback.data.startswith('size'):
        await state.set_state(default_state)
        id_merch = int(callback.data.split('_')[1])
        await state.update_data(id_merch=id_merch)
        info_merch = await get_merch(id_merch=id_merch)
        if info_merch.category == 'hoodie':
            await callback.message.answer(text=f'–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä hoodie',
                                          reply_markup=keyboard_size_hoodie())
            return
    user_dict[callback.message.chat.id] = await state.get_data()
    id_merch = user_dict[callback.message.chat.id]['id_merch']
    merch = await get_merch(id_merch=id_merch)
    # !!! REPLACE TEST AMOUNT TO
    amount = merch.amount / 10000
    invoice_id, link = await x_roket_pay.create_invoice(amount, currency=XRocketPayCurrency.ton,
                                                        description='Pay for our merch!')

    await update_user_data(**{
        'id_tg': callback.message.chat.id,
        'invoice_id': invoice_id,
        'status': XRocketPayStatus.active
    })

    await callback.message.answer(f'–û–ø–ª–∞—Ç–∏—Ç–µ —Ç–æ–≤–∞—Ä –ø–æ <a href="{link}">—Å—Å—ã–ª–∫–µ</a>',
                                  reply_markup=keyboard_confirm_pay(id_merch),
                                  parse_mode='html')


@router.callback_query(F.data.startswith('confirm_pay_for_'))
async def process_paying(callback: CallbackQuery, state: FSMContext):
    logging.info('Processing_paying')
    await callback.answer()
    user_dict[callback.message.chat.id] = await state.get_data()
    id_merch = user_dict[callback.message.chat.id]['id_merch']

    invoice_id = (await get_user(callback.from_user.id)).invoice_id
    status = await x_roket_pay.check_invoice_payed(invoice_id)
    logging.info(f"get_invoice_{invoice_id}_status: {status} to {callback.from_user.id}")
    if status:
        pay = True
        await update_user_data(**{
            'id_tg': callback.message.chat.id,
            'invoice_id': 0,
            'status': XRocketPayStatus.passed
        })

    else:
        pay = False
    if pay:
        await callback.message.answer(text='–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ')
        count_order = len(await get_all_order()) + 1
        info_merch = await get_merch(id_merch=id_merch)
        await state.update_data(id_order=count_order)
        # if await get_user(id_tg=callback.message.chat.id):
        #     user = await get_user(id_tg=callback.message.chat.id)
        #     data = {"id_order": count_order, "id_tg": callback.message.chat.id, "id_merch": id_merch, "count": 1,
        #             "cost": info_merch.amount, "address_delivery": user.address_delivery}
        #     await add_order(data=data)
        #     await get_address_delivery_1(message=callback.message, state=state)
        # else:
        data = {"id_order": count_order, "id_tg": callback.message.chat.id, "id_merch": id_merch, "count": 1,
                "cost": info_merch.amount, "address_delivery": "None"}
        await add_order(data=data)

        await callback.message.answer(text=f'–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?')
        await state.set_state(Merch.username)
    else:
        await callback.message.answer(text='–û–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É')
        await state.set_state(default_state)


@router.callback_query(F.data.startswith('size_'))
async def get_size_hoodie(callback: CallbackQuery, state: FSMContext):
    logging.info('get_size_hoodie')
    await callback.answer()
    size = callback.data.split('_')[1]
    await state.update_data(size=size)
    user_dict[callback.message.chat.id] = await state.get_data()
    id_order = user_dict[callback.message.chat.id]['id_order']
    await update_size_order(id_order=id_order, size=size)
    await callback.message.answer(text=f'–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?')
    await state.set_state(Merch.username)


@router.callback_query(F.data.startswith('cancel_pay_for_'))
async def cancel_pay_for(callback: CallbackQuery, state: FSMContext):
    await callback.answer('–û—Ç–º–µ–Ω–µ–Ω–æ', show_alert=True)
    await state.clear()


@router.message(F.text, Merch.username)
async def get_username(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    logging.info(f'get_username: {message.from_user.id}')
    name = message.text
    await state.update_data(name=name)
    await update_name_user(id_tg=message.chat.id, name=name)
    await message.answer(text=f'–†–∞–¥ –≤–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å {name}. –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤–∞—à–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ‚òéÔ∏è',
                         reply_markup=keyboards_get_contact())
    await state.set_state(Merch.phone)


@router.message(or_f(F.text, F.contact), StateFilter(Merch.phone))
async def process_validate_russian_phone_number(message: Message, state: FSMContext) -> None:
    """–ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø—Ä–æ–≤–æ–¥–∏–º –µ–≥–æ –≤–∞–ª–∏–¥–∞—Ü–∏—é). –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"""
    logging.info("process_validate_russian_phone_number")
    if message.contact:
        phone = str(message.contact.phone_number)
    else:
        phone = message.text
        if not validate_russian_phone_number(phone):
            await message.answer(text="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥, –Ω–∞–ø—Ä–∏–º–µ—Ä 89991112222:")
            return
    await state.update_data(phone=phone)
    await update_phone_user(id_tg=message.chat.id, phone=phone)
    await state.set_state(default_state)
    await message.answer(text=f'–ó–∞–ø–∏—Å—ã–≤–∞—é, {phone}. –í–µ—Ä–Ω–æ?',
                         reply_markup=keyboard_confirm_phone())


@router.callback_query(F.data == 'get_phone_back')
async def process_get_phone_back(callback: CallbackQuery, state: FSMContext) -> None:
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    logging.info(f'process_get_phone_back: {callback.message.chat.id}')
    await callback.message.edit_text(text=f'–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤–∞—à–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ‚òéÔ∏è',
                                     reply_markup=None)
    await state.set_state(Merch.phone)


@router.callback_query(F.data == 'confirm_phone')
async def process_confirm_phone(callback: CallbackQuery, state: FSMContext, bot: Bot) -> None:
    """–í–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. –ó–∞–ø—Ä–æ—Å –≥–æ—Ä–æ–¥–∞"""
    logging.info(f'process_confirm_phone: {callback.message.chat.id}')
    await bot.delete_message(chat_id=callback.message.chat.id, message_id=callback.message.message_id)
    await callback.message.answer(text=f'–î–ª—è —Ç–æ—á–Ω–æ–π –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–∞–º –Ω—É–∂–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–∏—Ç–µ–ª—è: —Ñ–∏–æ, —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è,'
                                       f' –∞–¥—Ä–µ—Å –∏ –≥–æ—Ä–æ–¥, –Ω–∞—à –ø–∞—Ä—Ç–Ω–µ—Ä –ø–æ –¥–æ—Å—Ç–∞–≤–∫–µ CDEK ‚úÖ',
                                  reply_markup=keyboards_main())
    await state.set_state(Merch.address_delivery)


@router.message(F.text, Merch.address_delivery)
async def get_address_delivery(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    logging.info(f'get_address_delivery: {message.from_user.id}')
    address_delivery = message.text
    await state.update_data(address_delivery=address_delivery)
    await update_address_delivery_user(id_tg=message.chat.id, address_delivery=address_delivery)

    user_dict[message.chat.id] = await state.get_data()
    id_merch = user_dict[message.chat.id]['id_merch']
    name = user_dict[message.chat.id]['name']
    phone = user_dict[message.chat.id]['phone']
    address_delivery = user_dict[message.chat.id]['address_delivery']
    id_order = user_dict[message.chat.id]['id_order']
    await update_address_delivery_order(id_order=id_order, address_delivery=address_delivery)
    merch_info = await get_merch(id_merch=id_merch)
    await message.answer(text=f'<b>{name}, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ:</b>\n'
                              f'<i>Merch:</i> {merch_info.title} - {merch_info.amount} TON\n'
                              f'<i>–í–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω:</i> {phone}\n'
                              f'<i>–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:</i> {address_delivery}.\n'
                              f'–í–µ—Ä–Ω–æ?',
                         reply_markup=keyboard_confirm_order(id_order=id_order),
                         parse_mode='html')


async def get_address_delivery_1(message: Message, state: FSMContext):
    """
    –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —Ä–∞–Ω–µ–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    :param message:
    :param state:
    :return:
    """
    logging.info(f'get_address_delivery: {message.chat.id}')
    user_info = await get_user(id_tg=message.chat.id)
    user_dict[message.chat.id] = await state.get_data()
    id_merch = user_dict[message.chat.id]['id_merch']
    id_order = user_dict[message.chat.id]['id_order']
    merch_info = await get_merch(id_merch=id_merch)

    await message.answer(text=f'<b>{user_info.name}, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ:</b>\n'
                              f'<i>Merch:</i> {merch_info.title} - {merch_info.amount} TON\n'
                              f'<i>–í–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω:</i> {user_info.phone}\n'
                              f'<i>–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:</i> {user_info.address_delivery}.\n'
                              f'–í–µ—Ä–Ω–æ?',
                         reply_markup=keyboard_confirm_order(id_order=id_order),
                         parse_mode='html')


@router.callback_query(F.data.startswith("order_"))
async def confirm_order(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """
    –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑
    :param callback:
    :param state:
    :return:
    """
    logging.info(f'confirm_order: {callback.message.chat.id}')
    answer = callback.data.split('_')[1]
    if answer == 'cancel':
        await bot.delete_message(chat_id=callback.message.chat.id, message_id=callback.message.message_id)
        await callback.message.answer(text='–î–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥')
        await get_username(message=callback.message, state=state)
    elif answer == 'confirm':
        await callback.answer(text='–î–∞–Ω–Ω—ã–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã',
                              show_alert=True)
        user_dict[callback.message.chat.id] = await state.get_data()
        id_merch = user_dict[callback.message.chat.id]['id_merch']
        id_order = user_dict[callback.message.chat.id]['id_order']
        user_info = await get_user(id_tg=callback.message.chat.id)
        address_delivery = user_info.address_delivery
        merch_info = await get_merch(id_merch=id_merch)
        order_info = await get_order(id_order=id_order)

        await callback.message.edit_text(text=f'–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –≤–∞—Å –∑–∞ –∑–∞–∫–∞–∑!\n'
                                              f'–ù–∞—à merch {merch_info.title} —É–∂–µ –º—á–∏—Ç –∫ –≤–∞–º –Ω–∞ –∞–¥—Ä–µ—Å '
                                              f'{address_delivery}.',
                                         reply_markup=None)
        for admin_id in config.tg_bot.admin_ids.split(','):
            try:
                if merch_info.category == 'hoodie':
                    size = order_info.size
                    await bot.send_message(chat_id=admin_id,
                                           text=f'<b>–ó–∞–∫–∞–∑ ‚Ññ {order_info.id_order}:</b>\n'
                                                f'<i>–ó–∞–∫–∞–∑—á–∏–∫:</i> {user_info.name} / @{user_info.username}\n'
                                                f'<i>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</i>: {user_info.phone}\n'
                                                f'<i>–ú–µ—Ä—á:</i> {merch_info.title}\n'
                                                f'<i>–†–∞–∑–º–µ—Ä:</i> {size}'
                                                f'<i>–ê–¥—Ä–µ—Å:</i> {order_info.address_delivery}',
                                           parse_mode='html')
                else:
                    await bot.send_message(chat_id=admin_id,
                                           text=f'<b>–ó–∞–∫–∞–∑ ‚Ññ {order_info.id_order}:</b>\n'
                                                f'<i>–ó–∞–∫–∞–∑—á–∏–∫:</i> {user_info.name} / @{user_info.username}\n'
                                                f'<i>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</i>: {user_info.phone}\n'
                                                f'<i>–ú–µ—Ä—á:</i> {merch_info.title}\n'
                                                f'<i>–ê–¥—Ä–µ—Å:</i> {order_info.address_delivery}',
                                           parse_mode='html')
            except:
                pass
        await state.set_state(default_state)
